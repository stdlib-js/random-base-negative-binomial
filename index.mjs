// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.1.1-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@v0.1.1-esm/index.mjs";import{isPrimitive as o}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.1.1-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.1.1-esm/index.mjs";import{factory as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-poisson@v0.1.0-esm/index.mjs";import{factory as u}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-gamma@v0.1.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-gcopy@v0.1.0-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/array-uint32@v0.1.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/object-assign@v0.1.0-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.1.0-esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as f}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.1.1-esm/index.mjs";import{isPrimitive as b}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.1.1-esm/index.mjs";function w(t,e){return f(t)?!b(e)||y(e)?new TypeError(c("invalid argument. Second argument must be a number and not NaN. Value: `%s`.",e)):e<=0||e>=1?new RangeError(c("invalid argument. Second argument must be on the interval: (0, 1). Value: `%f`.",e)):null:new TypeError(c("invalid argument. First argument must be a positive number. Value: `%s`.",t))}function x(){var f,b,y,x,E,N,T,O,L,V;if(T=!0,0===arguments.length)y=l(x={copy:!1});else if(1===arguments.length){if(!r(x=arguments[0]))throw new TypeError(c("invalid argument. Options argument must be an object. Value: `%s`.",x));if(s(x,"copy")&&!o(x.copy))throw new TypeError(c("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",x.copy));if(s(x,"prng")){if(!a(x.prng))throw new TypeError(c("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",x.prng));y=l({prng:x.prng})}else{if(s(x,"state")&&!i(x.state))throw new TypeError(c("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",x.state));!1===(x=j({},x)).copy?T=!1:x.state&&(x.state=g(x.state.length,x.state,1,new h(x.state.length),1)),x.copy=!1,y=l(x)}}else{if(O=w(V=arguments[0],L=arguments[1]))throw O;if(arguments.length>2){if(!r(x=arguments[2]))throw new TypeError(c("invalid argument. Options argument must be an object. Value: `%s`.",x));if(s(x,"copy")&&!o(x.copy))throw new TypeError(c("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",x.copy));if(s(x,"prng")){if(!a(x.prng))throw new TypeError(c("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",x.prng));y=l({prng:x.prng})}else{if(s(x,"state")&&!i(x.state))throw new TypeError(c("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",x.state));!1===(x=j({},x)).copy?T=!1:x.state&&(x.state=g(x.state.length,x.state,1,new h(x.state.length),1)),x.copy=!1,y=l(x)}}else y=l(x={copy:!1})}return x&&x.prng?f=void 0===V?u({prng:x.prng}):u(V,L/(1-L),{prng:x.prng}):(x.state?b=x.state:(b=y.state,y.state=b),f=void 0===V?u({state:b,copy:!1}):u(V,L/(1-L),{state:b,copy:!1})),E=void 0===V?F:J,N=y.PRNG,t(E,"NAME","negative-binomial"),x&&x.prng?(t(E,"seed",null),t(E,"seedLength",null),n(E,"state",m(null),d),t(E,"stateLength",null),t(E,"byteLength",null),t(E,"toJSON",m(null))):(e(E,"seed",A),e(E,"seedLength",P),n(E,"state",G,M),e(E,"stateLength",R),e(E,"byteLength",S),t(E,"toJSON",U)),t(E,"PRNG",N),E;function A(){return N.seed}function P(){return N.seedLength}function R(){return N.stateLength}function S(){return N.byteLength}function G(){return N.state}function M(t){if(!i(t))throw new TypeError(c("invalid argument. Must provide a Uint32Array. Value: `%s`.",t));T&&(t=g(t.length,t,1,new h(t.length),1)),N.state=t}function U(){var t={type:"PRNG"};return t.name=E.NAME,t.state=v(N.state),t.params=void 0===V?[]:[V,L],t}function J(){return y(f())}function F(t,e){return p(t)||p(e)||e<=0||e>=1?NaN:y(f(t,e/(1-e)))}}var E=x();t(E,"factory",x);export{E as default,x as factory};
//# sourceMappingURL=index.mjs.map
