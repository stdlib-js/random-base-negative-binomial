// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-poisson@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-gamma@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-gcopy@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/array-uint32@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@esm/index.mjs";var w=b.isPrimitive,x=v.isPrimitive,E=f,N=y;var T=function(t,e){return w(t)?!x(e)||N(e)?new TypeError(E("invalid argument. Second argument must be a number and not `NaN`. Value: `%s`.",e)):e<=0||e>=1?new RangeError(E("invalid argument. Second argument must be on the interval `(0,1)`. Value: `%f`.",e)):null:new TypeError(E("invalid argument. First argument must be a positive number. Value: `%s`.",t))},O=t,L=e,P=n,V=s,A=r,R=i,S=o.isPrimitive,G=a,M=m,U=p,J=d,F=l.factory,k=u.factory,q=g,z=h,B=c,C=j,D=f,H=T;var I=function(){var t,e,n,s,r,i,o,a,m,p;if(o=!0,0===arguments.length)n=F(s={copy:!1});else if(1===arguments.length){if(!A(s=arguments[0]))throw new TypeError(D("invalid argument. Options argument must be an object. Value: `%s`.",s));if(V(s,"copy")&&!S(s.copy))throw new TypeError(D("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",s.copy));if(V(s,"prng")){if(!G(s.prng))throw new TypeError(D("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",s.prng));n=F({prng:s.prng})}else{if(V(s,"state")&&!R(s.state))throw new TypeError(D("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",s.state));!1===(s=B(s,1)).copy?o=!1:s.state&&(s.state=q(s.state.length,s.state,1,new z(s.state.length),1)),s.copy=!1,n=F(s)}}else{if(a=H(p=arguments[0],m=arguments[1]))throw a;if(arguments.length>2){if(!A(s=arguments[2]))throw new TypeError(D("invalid argument. Options argument must be an object. Value: `%s`.",s));if(V(s,"copy")&&!S(s.copy))throw new TypeError(D("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",s.copy));if(V(s,"prng")){if(!G(s.prng))throw new TypeError(D("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",s.prng));n=F({prng:s.prng})}else{if(V(s,"state")&&!R(s.state))throw new TypeError(D("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",s.state));!1===(s=B(s,1)).copy?o=!1:s.state&&(s.state=q(s.state.length,s.state,1,new z(s.state.length),1)),s.copy=!1,n=F(s)}}else n=F(s={copy:!1})}return s&&s.prng?t=void 0===p?k({prng:s.prng}):k(p,m/(1-m),{prng:s.prng}):(s.state?e=s.state:(e=n.state,n.state=e),t=void 0===p?k({state:e,copy:!1}):k(p,m/(1-m),{state:e,copy:!1})),r=void 0===p?b:f,i=n.PRNG,O(r,"NAME","negative-binomial"),s&&s.prng?(O(r,"seed",null),O(r,"seedLength",null),P(r,"state",M(null),U),O(r,"stateLength",null),O(r,"byteLength",null),O(r,"toJSON",M(null))):(L(r,"seed",d),L(r,"seedLength",l),P(r,"state",h,c),L(r,"stateLength",u),L(r,"byteLength",g),O(r,"toJSON",j)),O(r,"PRNG",i),r;function d(){return i.seed}function l(){return i.seedLength}function u(){return i.stateLength}function g(){return i.byteLength}function h(){return i.state}function c(t){if(!R(t))throw new TypeError(D("invalid argument. Must provide a Uint32Array. Value: `%s`.",t));o&&(t=q(t.length,t,1,new z(t.length),1)),i.state=t}function j(){var t={type:"PRNG"};return t.name=r.NAME,t.state=C(i.state),t.params=void 0===p?[]:[p,m],t}function f(){return n(t())}function b(e,s){return J(e)||J(s)||s<=0||s>=1?NaN:n(t(e,s/(1-s)))}},K=I(),Q=I;t(K,"factory",Q);var W=K;export{W as default,Q as factory};
//# sourceMappingURL=index.mjs.map
