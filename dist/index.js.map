{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/factory.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( r, p ) {\n\tif ( !isPositive( r ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', r ) );\n\t}\n\tif ( !isNumber( p ) || isnan( p ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number and not NaN. Value: `%s`.', p ) );\n\t}\n\tif ( p <= 0.0 || p >= 1.0 ) {\n\t\treturn new RangeError( format( 'invalid argument. Second argument must be on the interval: (0, 1). Value: `%f`.', p ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar poisson = require( '@stdlib/random-base-poisson' ).factory;\nvar gamma = require( '@stdlib/random-base-gamma' ).factory;\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar assign = require( '@stdlib/object-assign' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {number} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be number\n* @throws {RangeError} `p` must be a number on the interval `(0,1)`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory();\n*\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar STATE;\n\tvar rpois;\n\tvar opts;\n\tvar prng;\n\tvar rand;\n\tvar FLG;\n\tvar err;\n\tvar p;\n\tvar r;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trpois = poisson( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trpois = poisson({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trpois = poisson( opts );\n\t\t}\n\t} else {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( r, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trpois = poisson({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trpois = poisson( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trpois = poisson( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rpois.state;\n\t\t\trpois.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( r === void 0 ) {\n\t\tprng = negativeBinomial2;\n\t} else {\n\t\tprng = negativeBinomial1;\n\t}\n\trand = rpois.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'negative-binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( r === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ r, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial1();\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial1() {\n\t\treturn rpois( rgamma() );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of successes until experiment is stopped\n\t* @param {number} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial2( 10, 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial2( r, p ) {\n\t\tif (\n\t\t\tisnan( r ) ||\n\t\t\tisnan( p ) ||\n\t\t\tp <= 0.0 ||\n\t\t\tp >= 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rpois( rgamma( r, p/(1-p) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {PRNG}\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = negativeBinomial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-negative-binomial\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random-base-negative-binomial' );\n*\n* var v = negativeBinomial( 20, 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-negative-binomial' ).factory;\n* var negativeBinomial = factory( 10, 0.3, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-negative-binomial' ).factory;\n* var negativeBinomial = factory({\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial( 10, 0.67 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isPositive", "isNumber", "format", "isnan", "validate", "r", "p", "require_factory", "__commonJSMin", "exports", "module", "setReadOnly", "setReadOnlyAccessor", "setReadWriteAccessor", "hasOwnProp", "isObject", "isUint32Array", "isBoolean", "isFunction", "constantFunction", "noop", "isnan", "poisson", "gamma", "gcopy", "Uint32Array", "assign", "typedarray2json", "format", "validate", "factory", "rgamma", "STATE", "rpois", "opts", "prng", "rand", "FLG", "err", "r", "negativeBinomial2", "negativeBinomial1", "getSeed", "getSeedLength", "getState", "setState", "getStateLength", "getStateSize", "toJSON", "s", "out", "p", "require_main", "__commonJSMin", "exports", "module", "factory", "negativeBinomial", "setReadOnly", "main", "factory"]
}
