{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( r, p ) {\n\tif ( !isPositive( r ) ) {\n\t\treturn new TypeError( format( 'invalid argument. First argument must be a positive number. Value: `%s`.', r ) );\n\t}\n\tif ( !isNumber( p ) || isnan( p ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Second argument must be a number primitive and not `NaN`. Value: `%s`.', p ) );\n\t}\n\tif ( p <= 0.0 || p >= 1.0 ) {\n\t\treturn new RangeError( format( 'invalid argument. Second argument must be on the interval `(0,1)`. Value: `%f`.', p ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar poisson = require( '@stdlib/random-base-poisson' ).factory;\nvar gamma = require( '@stdlib/random-base-gamma' ).factory;\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar copy = require( '@stdlib/utils-copy' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {number} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be number\n* @throws {RangeError} `p` must be a number on the interval `(0,1)`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory();\n*\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar STATE;\n\tvar rpois;\n\tvar opts;\n\tvar prng;\n\tvar rand;\n\tvar FLG;\n\tvar err;\n\tvar p;\n\tvar r;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trpois = poisson( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t}\n\t\t\trpois = poisson({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trpois = poisson( opts );\n\t\t}\n\t} else {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( r, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trpois = poisson({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trpois = poisson( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trpois = poisson( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rpois.state;\n\t\t\trpois.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( r === void 0 ) {\n\t\tprng = negativeBinomial2;\n\t} else {\n\t\tprng = negativeBinomial1;\n\t}\n\trand = rpois.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'negative-binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( r === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ r, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial1();\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial1() {\n\t\treturn rpois( rgamma() );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of successes until experiment is stopped\n\t* @param {number} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial2( 10, 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial2( r, p ) {\n\t\tif (\n\t\t\tisnan( r ) ||\n\t\t\tisnan( p ) ||\n\t\t\tp <= 0.0 ||\n\t\t\tp >= 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rpois( rgamma( r, p/(1-p) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-negative-binomial\n*\n* @example\n* var negativeBinomial = require( '@stdlib/random-base-negative-binomial' );\n*\n* var v = negativeBinomial( 20, 0.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-negative-binomial' ).factory;\n* var negativeBinomial = factory( 10, 0.3, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-negative-binomial' ).factory;\n* var negativeBinomial = factory({\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial( 10, 0.67 );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar negativeBinomial = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( negativeBinomial, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = negativeBinomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {PRNG}\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\n\nmodule.exports = negativeBinomial;\n"],"names":["isPositive","require$$0","isPrimitive","isNumber","require$$1","format","require$$2","isnan","require$$3","validate_1","r","p","TypeError","RangeError","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","hasOwnProp","isObject","require$$4","isUint32Array","require$$5","isBoolean","require$$6","isFunction","require$$7","constantFunction","require$$8","noop","require$$9","require$$10","poisson","require$$11","factory","gamma","require$$12","gcopy","require$$13","Uint32Array","require$$14","copy","require$$15","typedarray2json","require$$16","require$$17","validate","require$$18","factory_1","rgamma","STATE","rpois","opts","prng","rand","FLG","err","arguments","length","state","negativeBinomial2","negativeBinomial1","PRNG","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","seed","seedLength","stateLength","byteLength","s","out","name","NAME","params","NaN","negativeBinomial","lib"],"mappings":"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"}