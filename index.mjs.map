{"version":3,"file":"index.mjs","sources":["../lib/factory.js","../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isFunction from '@stdlib/assert-is-function';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport { factory as poisson } from '@stdlib/random-base-poisson';\nimport { factory as gamma } from '@stdlib/random-base-gamma';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport Uint32Array from '@stdlib/array-uint32';\nimport assign from '@stdlib/object-assign';\nimport typedarray2json from '@stdlib/array-to-json';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating negative binomial distributed random numbers.\n*\n* @param {PositiveNumber} [r] - number of successes until experiment is stopped\n* @param {number} [p] - success probability\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `r` must be a positive number\n* @throws {TypeError} `p` must be number\n* @throws {RangeError} `p` must be a number on the interval `(0,1)`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var negativeBinomial = factory( 10, 0.5 );\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory( 10, 0.8, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* var negativeBinomial = factory();\n*\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nfunction factory() {\n\tvar rgamma;\n\tvar STATE;\n\tvar rpois;\n\tvar opts;\n\tvar prng;\n\tvar rand;\n\tvar FLG;\n\tvar err;\n\tvar p;\n\tvar r;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trpois = poisson( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0on2V', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( '0on2o', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0on6u', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trpois = poisson({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0on6z', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = assign( {}, opts );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trpois = poisson( opts );\n\t\t}\n\t} else {\n\t\tr = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\terr = validate( r, p );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0on2V', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0on2o', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0on6u', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trpois = poisson({\n\t\t\t\t\t'prng': opts.prng\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0on6z', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = assign( {}, opts );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trpois = poisson( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trpois = poisson( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'prng': opts.prng\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rpois.state;\n\t\t\trpois.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\tif ( r === void 0 ) {\n\t\t\trgamma = gamma({\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t} else {\n\t\t\trgamma = gamma( r, p/(1-p), {\n\t\t\t\t'state': STATE,\n\t\t\t\t'copy': false\n\t\t\t});\n\t\t}\n\t}\n\tif ( r === void 0 ) {\n\t\tprng = negativeBinomial2;\n\t} else {\n\t\tprng = negativeBinomial1;\n\t}\n\trand = rpois.PRNG;\n\n\tsetReadOnly( prng, 'NAME', 'negative-binomial' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( prng, 'PRNG', rand );\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( '0on70', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( r === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ r, p ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with bound parameters `r` and `p`.\n\t*\n\t* @private\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial1();\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial1() {\n\t\treturn rpois( rgamma() );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a negative binomial distribution with parameters `r` and `p`.\n\t*\n\t* @private\n\t* @param {PositiveNumber} r - number of successes until experiment is stopped\n\t* @param {number} p - success probability\n\t* @returns {NonNegativeInteger} pseudorandom number\n\t*\n\t* @example\n\t* var v = negativeBinomial2( 10, 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction negativeBinomial2( r, p ) {\n\t\tif (\n\t\t\tisnan( r ) ||\n\t\t\tisnan( p ) ||\n\t\t\tp <= 0.0 ||\n\t\t\tp >= 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn rpois( rgamma( r, p/(1-p) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isnan from '@stdlib/assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 10, 0.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( r, p ) {\n\tif ( !isPositive( r ) ) {\n\t\treturn new TypeError( format( '0on71', r ) );\n\t}\n\tif ( !isNumber( p ) || isnan( p ) ) {\n\t\treturn new TypeError( format( '0on6w', p ) );\n\t}\n\tif ( p <= 0.0 || p >= 1.0 ) {\n\t\treturn new RangeError( format( '0on7X', p ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a negative binomial distribution.\n*\n* @name negativeBinomial\n* @type {PRNG}\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {number} p - success probability\n* @returns {NonNegativeInteger} pseudorandom number\n*\n* @example\n* var v = negativeBinomial( 10, 0.5 );\n* // returns <number>\n*/\nvar negativeBinomial = factory();\n\n\n// EXPORTS //\n\nexport default negativeBinomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-negative-binomial\n*\n* @example\n* import negativeBinomial from '@stdlib/random-base-negative-binomial';\n*\n* var v = negativeBinomial( 20, 0.5 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-negative-binomial';\n* var negativeBinomial = factory( 10, 0.3, {\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-negative-binomial';\n* var negativeBinomial = factory({\n*     'seed': 297\n* });\n*\n* var v = negativeBinomial( 10, 0.67 );\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["factory","rgamma","STATE","rpois","opts","prng","rand","FLG","err","p","r","arguments","length","poisson","copy","isObject","TypeError","format","hasOwnProp","isBoolean","isFunction","isUint32Array","state","assign","gcopy","Uint32Array","isPositive","isNumber","isnan","RangeError","validate","gamma","NaN","PRNG","setReadOnly","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","seed","seedLength","s","stateLength","byteLength","out","name","NAME","typedarray2json","params","negativeBinomial","main"],"mappings":"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"}